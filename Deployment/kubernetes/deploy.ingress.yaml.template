import yaml

# Load the YAML file
ingress_yaml = """
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kmgs-ingress
  namespace: ns-km
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"  # Adjust this to your ClusterIssuer
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/send-timeout: "3600"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:
  ingressClassName: webapprouting.kubernetes.azure.com
  defaultBackend:
    service:
      name: frontapp-service
      port:
        number: 5900
  rules:
  - host: "{{ fqdn }}"
    http:
      paths:
      - path: /backend(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: aiservice-service
            port:
              number: 9001
      - path: /()(.*)
        pathType: Prefix
        backend:
          service:
            name: frontapp-service
            port:
              number: 5900
  tls:
  - hosts:
    - "{{ fqdn }}"
    secretName: secret-kmgs
"""

# Function to validate the required fields
def validate_ingress(ingress):
    required_fields = {
        'fqdn': ingress['spec']['rules'][0]['host'],
        'cert-manager.io/cluster-issuer': ingress['metadata']['annotations'].get('cert-manager.io/cluster-issuer'),
        'ingressClassName': ingress['spec'].get('ingressClassName'),
        'frontapp-service': ingress['spec']['defaultBackend']['service']['name'],
        'aiservice-service': ingress['spec']['rules'][0]['http']['paths'][0]['backend']['service']['name'],
        'tls-secret-name': ingress['spec']['tls'][0].get('secretName')
    }

    # Check each required field
    for field, value in required_fields.items():
        if value in [None, '', '{{ fqdn }}']:
            print(f"ERROR: The field '{field}' is missing or empty.")
        else:
            print(f"Field '{field}' is valid: {value}")

# Load YAML data
ingress_data = yaml.safe_load(ingress_yaml)

# Validate
validate_ingress(ingress_data)